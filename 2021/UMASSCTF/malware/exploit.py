from Crypto.Cipher import AES
from Crypto.Util import Counter
import binascii
import os

plaintext = open("malware.py","rb").read()
ciphertext = open("work/malware.py.enc","rb").read()

#print("length of plaintext is ", len(plaintext))
#print("length of ciphertext is ", len(ciphertext))

outbytes = b''
for i in range(0,len(plaintext),16):
    plainbytes = plaintext[i:i+16]
    cipherbytes = ciphertext[i:i+16]
    t = int.from_bytes(plainbytes, byteorder='big') ^ int.from_bytes(cipherbytes, byteorder='big')
    outbytes += t.to_bytes(16,byteorder='big')

#print('outbytes = ',outbytes)
#print('length of outbytes = ',len(outbytes))

flagenc = open("work/flag.txt.enc","rb").read().strip()
#flagenc = open("work/malware.py.enc","rb").read().strip()

#print("length of flagenc = ", len(flagenc))


p = 2 # I tried here 1 or 2 or 3 
flagtxt = b''
for i in range(0,len(flagenc),16):
    flagbytes = flagenc[i:i+16]
    inbytes = outbytes[i+16*p:i+16*(p+1)]
    print("i=",i)
    print("flagbytes= ",len(flagbytes))
    print("inbytes = ",len(inbytes))
    if len(flagbytes) < 16:
        for x, y in zip(flagbytes,inbytes):
            t = x^y
            flagtxt += t.to_bytes(1,byteorder='big')
    else:
        t = int.from_bytes(flagbytes, byteorder='big') ^ int.from_bytes(inbytes, byteorder='big')
        flagtxt += t.to_bytes(16,byteorder='big')
print(flagtxt)


'''
for file_name in os.listdir():
    data = open(file_name, 'rb').read()

    cipher = AES.new(key, AES.MODE_CTR, counter = Counter.new(128, initial_value=iv))
    
    enc = open(file_name + '.enc', 'wb')
    enc.write(cipher.encrypt(data))

    iv += 1
'''
