from ptrlib import *
from binascii import unhexlify, hexlify

sock = Socket("imaginary.quals.beginners.seccon.jp", 1337)

# first input
sock.recvuntil(b'> ')
sock.sendline(b'1')
# 1*16 + 1337
sock.recvuntil(b'> ')
sock.sendline(b'1'+b'0'*10)
sock.recvuntil(b'> ')
sock.sendline(b'1337')
# export
sock.recvuntil(b'> ')
sock.sendline(b'4')
for i in range(2):
    print(i, "," ,sock.recvline())
# exported (1block + 1337i + : + [100, 1337]) => 1337i": [10000000000,1337]} のブロックが作れた
ciphertext = sock.recvline()
print(len(ciphertext))
print(ciphertext)
# delete first block
payload1 = hexlify(unhexlify(ciphertext)[16:])
print(len(payload1))
print(payload1)
#繋ぎなおし
sock.close()
sock = Socket("imaginary.quals.beginners.seccon.jp",1337)
# 2回目のチャレンジで({"111111 + 11i": [111111, 11], "1 + 1i": [1, 1]})を作る
# second input
sock.recvuntil(b'> ')
sock.sendline(b'1')
# 1*16 + 1337
sock.recvuntil(b'> ')
sock.sendline(b'1'*6)
sock.recvuntil(b'> ')
sock.sendline(b'11')
# second input
sock.recvuntil(b'> ')
sock.sendline(b'1')
# 1*16 + 1337
sock.recvuntil(b'> ')
sock.sendline(b'1')
sock.recvuntil(b'> ')
sock.sendline(b'1')
# export
sock.recvuntil(b'> ')
sock.sendline(b'4')
for i in range(2):
    print(i, "," ,sock.recvline())
# exported ({"111111 + 11i": [111111, 11], ") のブロックが作れた
ciphertext = sock.recvline()
print(len(ciphertext))
print(ciphertext)
# extract first and second block
payload2 = hexlify(unhexlify(ciphertext)[:32])
print(len(payload2))
payload = payload2 + payload1
# send payload
#sock.recvuntil(b'> ')
sock.sendline(b'3')
sock.recvuntil(b'> ')
sock.sendline(payload)
for i in range(6):
    print(i, ',', sock.recvline())
# send secret
sock.recvuntil('> ')
sock.sendline(b'5')
print(sock.recvline())
print(sock.recvline())
print(sock.recvline())
print(sock.recvline())
print(sock.recvline())


