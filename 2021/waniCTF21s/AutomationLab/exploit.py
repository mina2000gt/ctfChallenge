from ptrlib import *
import numpy as np

fi = open("log","w")

def get_array_string(array):
    ret = ''
    for c in array:
        if c == 0:
            ret += '0'
        else:
            ret += '1'
    return ret

def calc(init, gen):
    history_no = 0
    history = np.zeros(shape=(10000,len(init)),dtype=np.int8)
    state = np.zeros(shape=len(init),dtype=np.int8)
    next_state = np.zeros(shape=len(init),dtype=np.int8)
    for p in range(len(init)):
        if init[p] == '0':
            state[p] = 0
            history[history_no][p] = 0
        else:
            state[p] = 1
            history[history_no][p] = 1
    print(get_array_string(state))
    gen_origin = gen
    while gen > 0:
        history_no += 1
        gen -= 1
        for i in range(len(init)):
            left = state[i-1]
            center = state[i]
            right = state[(i+1)%len(init)]
            pattern_index = 2**2*left + 2**1*center + 2**0*right
            next_state[i] = 30 >> pattern_index & 1
        state[:] = next_state[:]
        history[history_no][:] = state[:]
        for i in range(history_no):
            if np.all(history[i] == state):
                print(i," is the same as ",history_no)
                print(get_array_string(history[i])," and ",get_array_string(history[history_no]))
                period = history_no - i
                print("loopnum is ",period)
                res = gen_origin - i
                print("res is ", res)
                no = res % period
                print("no is ", no)
                print("output is ",i+no)
                print(get_array_string(history[i+no]))
                fi.write(get_array_string(history[i+no]))
                fi.write('\n')
                return get_array_string(history[i+no])
        print(history_no,",",get_array_string(state))
        fi.write(get_array_string(state))
        fi.write('\n')
    return get_array_string(state)

sock = Socket("automaton.mis.wanictf.org",50020)
sock.recvuntil(b'continue)')
sock.sendline(b'')


print('First Problem is to be solved')
sock.recvuntil(b'up.')
sock.recvline()
init = sock.recvline().strip().split(b' = ')[1].decode()
print('First init has be read ',init)
gen = int(sock.recvline().strip().split(b' = ')[1].decode())
print('First gen has be read ', gen)
sock.recvuntil(b'> ')
print('start calculating First ans')
ans = calc(init, gen)
print('end calculating First ans')
sock.sendline(ans.encode())
print('First Problem was solved')
print(sock.recvline())


init = sock.recvline().strip().split(b' = ')[1].decode()
print('Second init has be read ',init)
gen = int(sock.recvline().strip().split(b' = ')[1].decode())
print('Second gen has be read ', gen)
sock.recvuntil(b'> ')
print('start calculating Second ans')
ans = calc(init, gen)
print('end calculating Second ans')
sock.sendline(ans.encode())
print('Second Problem was solved')
print(sock.recvline())

init = sock.recvline().strip().split(b' = ')[1].decode()
print('Third init has be read ',init)
gen = int(sock.recvline().strip().split(b' = ')[1].decode())
print('Third gen has be read ', gen)
sock.recvuntil(b'> ')
print('start calculating Third ans')
ans = calc(init, gen)
print('end calculating Third ans')
sock.sendline(ans.encode())
print('Third Problem was solved')
print(sock.recvline())
print(sock.recvline())
print(sock.recvline())
